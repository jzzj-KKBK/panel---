import{L as e,al as t}from"./utils-lib.js?v=1756369731";import{_ as n}from"./index117.js?v=1756369731";import{d as l}from"./useMethod6.js?v=1756369731";import{g as r}from"./useStore5.js?v=1756369731";import{c as i,r as a,k as s,p as o,q as m,v as p,x as u,M as c,P as w}from"./base-lib.js?v=1756369731";import"./__commonjsHelpers__.js?v=1756369731";import"./validator.js?v=1756369731";import"./index104.js?v=1756369731";import"./column.js?v=1756369731";import"./firewall.js?v=1756369731";const d=i({__name:"index",setup(i){const{refs:{networkActive:d}}=r(),_=a({}),g=s({title:"扫描感知-功能介绍",ps:"一款堡塔扫描感知，全天识别恶意扫描服务器的恶意IP",source:117,desc:["防止恶意扫描攻击","快速定位异常流量"],tabImgs:[{title:"概览",imgSrc:"https://www.bt.cn/Public/new/plugin/introduce/firewall/network_scan/1.png"},{title:"封锁记录",imgSrc:"https://www.bt.cn/Public/new/plugin/introduce/firewall/network_scan/2.png"},{title:"操作日志",imgSrc:"https://www.bt.cn/Public/new/plugin/introduce/firewall/network_scan/3.png"},{title:"实时日志",imgSrc:"https://www.bt.cn/Public/new/plugin/introduce/firewall/network_scan/4.png"}],isInstall:!1,productSrc:"https://www.bt.cn/Public/new/plugin/introduce/firewall/network_scan/1.png",pluginInfo:{}}),b=[{label:"概览",name:"home",render:()=>e(()=>import("./index298.js?v=1756369731"),__vite__mapDeps([]),import.meta.url)},{label:"封锁记录",name:"blockde",lazy:!0,render:()=>e(()=>import("./index299.js?v=1756369731"),__vite__mapDeps([]),import.meta.url)},{label:"操作日志",name:"operationLog",lazy:!0,render:()=>e(()=>import("./index300.js?v=1756369731"),__vite__mapDeps([]),import.meta.url)},{label:"实时日志",name:"realTimeLog",lazy:!0,render:()=>e(()=>import("./index301.js?v=1756369731"),__vite__mapDeps([]),import.meta.url)}];return o(async()=>{_.value=await l("networkscan"),g.pluginInfo=_.value}),(e,l)=>{const r=t,i=n;return m(),p("div",null,[u(_).setup&&u(_).endtime>0?(m(),c(r,{key:0,type:"card",modelValue:u(d),"onUpdate:modelValue":l[0]||(l[0]=e=>w(d)?d.value=e:null),options:b},null,8,["modelValue"])):(m(),c(i,{key:1,data:u(g),class:"px-[20%] my-[8rem]"},null,8,["data"]))])}}});export{d as default};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
