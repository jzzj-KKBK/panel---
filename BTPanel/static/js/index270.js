import{u as e,l as a,L as t,K as s,S as r,J as o,k as l,a0 as n,h as i,b as d,o as p,e as c}from"./utils-lib.js?v=1756369731";import{_ as u}from"./index103.js?v=1756369731";import{c as m,r as f,k as _,e as v,B as w,p as b,n as y,G as g,q as h,M as P,A as j,y as k,x,P as A,H as V,v as I,a_ as S,F as q,D as E,bM as T,z as F,bN as L}from"./base-lib.js?v=1756369731";import{_ as C}from"./index112.js?v=1756369731";import{q as O,t as D,u as H,v as N,w as R}from"./firewall.js?v=1756369731";import{a as U,u as J}from"./column.js?v=1756369731";import{r as M,p as z,u as B,e as G,b as K,d as $,f as Q}from"./useMethod6.js?v=1756369731";import{k as W}from"./validator.js?v=1756369731";import{_ as X}from"./index.vue_vue_type_script_setup_true_lang11.js?v=1756369731";import{g as Y}from"./useStore5.js?v=1756369731";import"./__commonjsHelpers__.js?v=1756369731";import"./index104.js?v=1756369731";const Z={class:"p-2rem"},ee={class:"!w-[6rem] inline-block"},ae={class:"max-w-[26rem] inline-block"},te=c(m({__name:"index",setup(c){const m=d();e();const{refs:{systemTabActive:te}}=Y(),se=f(),re=f(!1),oe=f([]),le=_({p:1,row:20}),ne=f(""),ie=f(0),de=f({}),pe=f(!1),ce=_({processName:["进程名",""],processId:["进程pid",""],processTip:["启动命令",""]}),ue=()=>{le.p=1,K.value="ALL",_e()},me=async()=>{const e=await $("fail2ban");e.setup?a({title:"端口防扫描",area:60,compData:{type:"AntiScan",requestFn:()=>O()},component:()=>t(()=>import("./index458.js?v=1756369731"),__vite__mapDeps([]),import.meta.url)}):(W({name:e.name,type:"i",pluginInfo:e}),m.warn("请先安装防暴破插件"))},fe=e=>{a({title:e?"修改端口规则":"添加端口规则",area:44,component:()=>t(()=>import("./add-port-rule.js?v=1756369731"),__vite__mapDeps([]),import.meta.url),compData:{...de.value,isEdit:e,refreshFn:_e},showFooter:!0})},_e=async e=>{"port"===te.value&&(e&&(K.value=e),await s({loading:re,data:{data:[Array,oe],page:r(ie)},request:D({chain:K.value||"ALL",...le,query:ne.value})}),oe.value=oe.value.map(e=>({...e,key:"".concat(e.Port,"_").concat(e.id,"_").concat(e.Family)})))},ve=(e,a)=>({operation:a,protocol:e.Protocol,address:e.Address,port:e.Port,strategy:e.Strategy,chain:e.Chain,brief:e.brief}),we=[{label:"删除",value:"delete",event:async(e,a)=>{await Q(e,a,async(e,a)=>{const t={...ve(e,"remove"),domain:e.domain};return await N(t,!1)},{label:"端口",prop:"Port"},_e)}}],be=f([U({key:"key"}),{label:"协议",width:80,prop:"Protocol"},{label:"端口",width:120,renderHeader:()=>M("端口","防火墙会加载系统所有端口信息，IPV6端口无法与IPV4分开管理，非必要勿删除IPV6端口"),render:(e,a)=>(e.brief=e.brief||z[e.Port],v("span",{class:"mr-[1rem]"},[e.Port+("ipv6"===e.Family?"（ipv6）":"")]))},{label:"状态",width:100,renderHeader:()=>M("状态","link","https://www.bt.cn/bbs/thread-4708-1-1.html"),render:(e,a)=>{var t,r;return v("div",null,[v("span",null,[0===e.status?"未使用":1!==e.status||(null==(t=e.Port)?void 0:t.includes("-"))?"正常":"外网不通"]),v("span",{class:2!==e.status||(null==(r=e.Port)?void 0:r.includes("-"))||"udp"===e.Protocol?"!hidden":"bt-link",onClick:()=>(async e=>{de.value=e,await s({loading:"正在获取数据,请稍后...",request:H({port:e.Port}),success:({data:e})=>{ce.processName[1]=e.process_name,ce.processId[1]=e.process_pid,ce.processTip[1]=e.process_cmd}}),pe.value=!0})(e)},[w("（详情）")])])}},...B({changePolicy:async e=>{const a="accept"!==e.Strategy;await p({icon:"warning-filled",title:"修改端口规则策略【"+e.Port+"】",content:"修改端口策略为“".concat(a?"放行":"禁止","”，设置后该端口将").concat(a?"恢复正常访问":"禁止访问服务器","，是否继续操作？")});const t={old_data:JSON.stringify({...e}),new_data:JSON.stringify({...ve({...e,Strategy:a?"accept":"drop"},"add")})};await s({loading:"正在修改端口规则策略...",request:R(t,!1),message:!0,success:()=>_e()})},change:_e}),{label:"来源",render:(e,a)=>v("div",null,[e.sid>0?v("span",{title:e.domain},[e.domain]):"all"===e.Address?v("span",null,[w("所有IP")]):v("span",{title:e.Address},[e.Address])])},{label:"备注",showOverflowTooltip:!0,render:e=>v("span",null,[e.brief||z[e.Port]||""])},{label:"时间",prop:"addtime",width:160,renderHeader:()=>M("时间","-- : 表示面板数据库中未记录更新时间，规则从系统中直接读取，忽略即可")},G({editEvent:e=>{de.value=e,fe(!0)},deleteEvent:async(e,a)=>{await p({icon:"warning-filled",title:"删除端口规则【"+e.Port+"】",content:"删除当前端口规则，是否继续操作？"});const t={...ve(e,"remove"),domain:e.domain};await s({loading:"正在删除端口规则，请稍后...",request:N(t,!1),message:!0,success:()=>_e()})}})]);return b(()=>{y(async()=>{try{const e=await window.$extension();if(!e)return _e();if(e.extensionElement({custom:{useOperate:J,portsPs:z,setPortConfig:e=>{be.value[2]=e,_e()}}}).every(e=>!1===e))return _e()}catch(e){return _e()}})}),(e,a)=>{const t=E,s=o,r=l,d=n,p=C,c=L,m=T,f=i,_=u,b=g("bt-loading");return h(),P(_,null,{"header-left":j(()=>[v(t,{type:"primary",onClick:a[0]||(a[0]=e=>fe(!1))},{default:j(()=>[...a[6]||(a[6]=[w(" 添加端口规则 ",-1)])]),_:1}),v(X,{type:"port",refreshFn:_e}),v(t,{onClick:me},{default:j(()=>[...a[7]||(a[7]=[w("端口防扫描",-1)])]),_:1})]),"header-right":j(()=>[a[8]||(a[8]=k("div",{id:"extension-rulesTable"},null,-1)),v(s,{modelValue:x(ne),"onUpdate:modelValue":a[1]||(a[1]=e=>A(ne)?ne.value=e:null),onSearch:ue,placeholder:"请输入端口/来源",class:"!w-24rem"},null,8,["modelValue"])]),content:j(()=>[V(v(r,{ref_key:"portTableRef",ref:se,column:x(be),data:x(oe),description:"端口列表为空"},null,8,["column","data"]),[[b,x(re)],[b,"正在加载端口列表，请稍后...","title"]])]),"footer-left":j(()=>[v(d,{"table-ref":x(se),options:we},null,8,["table-ref"])]),"footer-right":j(()=>[v(p,{ref:"portRulesPager",total:x(ie),page:x(le).p,"onUpdate:page":a[2]||(a[2]=e=>x(le).p=e),row:x(le).row,"onUpdate:row":a[3]||(a[3]=e=>x(le).row=e),onChange:a[4]||(a[4]=e=>_e()),name:"port"},null,8,["total","page","row"])]),popup:j(()=>[v(f,{title:x(de).Port+"-端口使用进程详情",modelValue:x(pe),"onUpdate:modelValue":a[5]||(a[5]=e=>A(pe)?pe.value=e:null),area:42},{default:j(()=>[k("div",Z,[v(m,{class:"margin-top table-descriptions",border:"",column:1},{default:j(()=>[(h(!0),I(q,null,S(x(ce),(e,a)=>(h(),P(c,{key:a},{label:j(()=>[k("span",ee,F(e[0]),1)]),default:j(()=>[k("span",ae,F(e[1]),1)]),_:2},1024))),128))]),_:1})])]),_:1},8,["title","modelValue"])]),_:1})}}}),[["__scopeId","data-v-162d6728"]]);export{te as default};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
