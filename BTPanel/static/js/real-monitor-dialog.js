import{K as e,gJ as t,v as s,R as l,gK as a,e as i}from"./utils-lib.js?v=1756369731";import{c as r,r as o,k as n,p as c,n as m,aD as d,G as u,H as p,x as f,q as b,v as x,y as v,B as _,z as g,e as w}from"./base-lib.js?v=1756369731";import"./__commonjsHelpers__.js?v=1756369731";const h={class:"flex flex-col p-[1.6rem] lib-box !h-full overflow-auto"},y={class:"card"},k={class:"con flex items-center"},B={class:"p-[1.5rem] text-[1.3rem] font-bold"},S={class:"font-normal text-[#919191]"},j={class:"p-[1.5rem] text-[1.3rem] font-bold"},z={class:"font-normal text-[#919191]"},D={class:"chartCon flex flex-wrap w-full justify-between"},I={class:"flex w-[49%]"},K={class:"card w-full flex-1 mb-[1rem]"},M={class:"chart w-full h-[30rem]"},R={class:"flex w-[49%]"},A={class:"card w-full flex-1 mb-[1rem]"},C={class:"chart w-full h-[30rem]"},L={class:"flex w-[49%]"},N={class:"card w-full flex-1 mb-[1rem]"},P={class:"chart w-full h-[30rem]"},G={class:"flex w-[49%]"},O={class:"card w-full flex-1 mb-[1rem]"},U={class:"chart w-full h-[30rem]"},q=i(r({__name:"real-monitor-dialog",props:{compData:{default:()=>({})}},setup(i){const r=i,q=o(),H=o(),J=o(),T=o(),E=o(!1),F=n({cpu_list:[],mem_list:{usage:[],cache:[]},disk_list:{read:[],write:[]},network_list:{tx:[],rx:[]},time_list:[],limit:"",top_limit:"",bottom_limit:""});let Q=null;const V=async l=>{let a=(new Date).getTime();const i=JSON.stringify({id:l.id,dk_status:l.status}),r=await e({request:t({data:i})}),o=r.data;if(!r.status)return!1;F.limit=s(o.limit),F.top_limit=s(o.tx_total),F.bottom_limit=s(o.rx_total),F.time_list.push(a),F.mem_list.usage.push([a,s(o.usage,!1,null,"MB")]),F.mem_list.cache.push([a,s(o.cache,!1,null,"MB")]),F.cpu_list.push([a,o.cpu_usage]),F.disk_list.read.push([a,s(o.read_total,!1,null,"MB")]),F.disk_list.write.push([a,s(o.write_total,!1,null,"MB")]),F.network_list.tx.push([a,s(o.tx,!1,null,"KB")]),F.network_list.rx.push([a,s(o.rx,!1,null,"KB")]);const n=W("cpu"),c=W("mem"),m=W("disk"),d=W("network");n.xAxis.data=F.time_list,n.series[0].data=F.cpu_list,c.series[0].data=F.mem_list.usage,c.series[1].data=F.mem_list.cache,m.series[0].data=F.disk_list.read,m.series[1].data=F.disk_list.write,d.series[0].data=F.network_list.tx,d.series[1].data=F.network_list.rx,Y.value=n,Z.value=c,$.value=m,ee.value=d,E.value=!1},W=e=>{let t="/MB";const s=X();switch(e){case"cpu":s.tooltip.formatter=function(e){const t=e[0];return l(t.data[0])+"<br>"+t.seriesName+": "+t.data[1]+"%"},s.yAxis.min=0,s.series=[{name:"CPU",type:"line",symbol:"none",smooth:!0,itemStyle:{normal:{color:"rgb(0, 153, 238)"}}}];break;case"network":t="/KB";case"mem":case"disk":const a={mem:["内存","缓存"],disk:["读取","写入"],network:["上行","下行"],color:[{mem:["rgb(185, 220, 253)","rgb(185, 220, 253,0.6)","rgb(185, 220, 253,0.3)","rgba(229,147,187)","rgba(229,147,187,0.6)","rgba(229,147,187,0.3)"],disk:["rgb(255, 70, 131)","rgb(255, 70, 131,0.6)","rgb(255, 70, 131,0.3)","rgba(46, 165, 186)","rgba(46, 165, 186,0.6)","rgba(46, 165, 186,0.3)"],network:["rgb(255, 140, 0)","rgb(255, 140, 0,0.6)","rgb(255, 140, 0,0.3)","rgb(30, 144, 255)","rgb(30, 144, 255,0.6)","rgb(30, 144, 255,0.3)"]}]};s.tooltip.formatter=function(e){const s=e[0].data[0],a=l(s/1e3);let i="";for(var r=0;r<e.length;r++)i+='<span style="display: inline-block; width: 10px; height: 10px; margin-rigth:10px; border-radius: 50%; background: '+e[r].color+';"></span>  '+e[r].seriesName+"：",i+=e[r].data[1]+t+(e.length-1!==r?"<br />":"");return"时间："+a+"<br />"+i},s.legend={top:"18px",data:a[e]},s.series=[{name:a[e][0],type:"line",symbol:"none",itemStyle:{normal:{color:a.color[0][e][0],areaStyle:{}}}},{name:a[e][1],type:"line",symbol:"none",itemStyle:{normal:{color:a.color[0][e][4],areaStyle:{}}}}]}return s},X=()=>({tooltip:{trigger:"axis",axisPointer:{type:"cross"}},grid:{x:50,y:50,x2:30,y2:30},xAxis:{type:"time",scale:!0,splitNumber:4,boundaryGap:!0,axisLine:{lineStyle:{color:"#666"}},axisLabel:{formatter:function(e){return l(e/1e3,"hh:mm:ss")}}},yAxis:{type:"value",boundaryGap:[0,"100%"],splitLine:{lineStyle:{color:"#ddd"}},axisLine:{lineStyle:{color:"#666"}}}}),Y=o(W("cpu")),Z=o(W("mem")),$=o(W("disk")),ee=o(W("network"));return c(()=>{E.value=!0,m(()=>{var e;e=r.compData.row,m(()=>{Y.value=W("cpu"),Z.value=W("mem"),$.value=W("disk"),ee.value=W("network"),V(e),q.value.chart.resize(),H.value.chart.resize(),J.value.chart.resize(),T.value.chart.resize()}),Q=setInterval(function(){V(r.compData.row)},3e3)})}),d(()=>{clearInterval(Q)}),(e,t)=>{const s=a,l=u("bt-loading");return p((b(),x("div",h,[v("div",y,[t[2]||(t[2]=v("div",{class:"title"},"基础信息",-1)),v("div",k,[v("div",B,[t[0]||(t[0]=_(" 内存限额：",-1)),v("span",S,g(f(F).limit),1)]),v("div",j,[t[1]||(t[1]=_(" 流量情况：",-1)),v("span",z," 上行："+g(f(F).top_limit)+" - 下行："+g(f(F).bottom_limit),1)])])]),v("div",D,[v("div",I,[v("div",K,[t[3]||(t[3]=v("div",{class:"title"},"CPU",-1)),v("div",M,[w(s,{ref_key:"CPURef",ref:q,options:f(Y)},null,8,["options"])])])]),v("div",R,[v("div",A,[t[4]||(t[4]=v("div",{class:"title"},"内存",-1)),v("div",C,[w(s,{ref_key:"memRef",ref:H,options:f(Z)},null,8,["options"])])])]),v("div",L,[v("div",N,[t[5]||(t[5]=v("div",{class:"title"},"磁盘IO",-1)),v("div",P,[w(s,{ref_key:"diskRef",ref:J,options:f($)},null,8,["options"])])])]),v("div",G,[v("div",O,[t[6]||(t[6]=v("div",{class:"title"},"网络IO",-1)),v("div",U,[w(s,{ref_key:"netRef",ref:T,options:f(ee)},null,8,["options"])])])])])])),[[l,f(E)],[l,"正在获取监控数据，请稍候...","title"]])}}}),[["__scopeId","data-v-a009d1f6"]]);export{q as default};
